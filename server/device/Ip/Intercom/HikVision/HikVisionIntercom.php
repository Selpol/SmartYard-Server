<?php declare(strict_types=1);

namespace Selpol\Device\Ip\Intercom\HikVision;

use Selpol\Device\Ip\Intercom\IntercomDevice;
use Selpol\Device\Ip\Intercom\IntercomModel;
use Selpol\Http\Uri;

class HikVisionIntercom extends IntercomDevice
{
    public string $login = 'admin';

    public function __construct(Uri $uri, string $password, IntercomModel $model)
    {
        parent::__construct($uri, $password, $model);

        $this->requestOptions = ['digest' => $this->login . ':' . $this->password];
    }

    public function getSysInfo(): array
    {
        $response = $this->get('/ISAPI/System/deviceInfo');

        return [
            'DeviceID' => $response['deviceID'],
            'DeviceModel' => $response['model'],
            'HardwareVersion' => $response['hardwareVersion'],
            'SoftwareVersion' => $response['firmwareVersion'] . ' ' . $response['firmwareReleasedDate'],
        ];
    }

    public function addRfid(string $code, int $apartment): void
    {
        // TODO: Change the autogenerated stub
    }

    public function removeRfid(string $code, int $apartment): void
    {
        // TODO: Change the autogenerated stub
    }

    public function addApartment(int $apartment, bool $handset, array $sipNumbers, array $levels, int $code): void
    {
        // TODO: Change the autogenerated stub
    }

    public function removeApartment(int $apartment): void
    {
        // TODO: Change the autogenerated stub
    }

    public function setNtp(string $server, int $port, string $timezone = 'Europe/Moscow'): static
    {
        $this->put('/ISAPI/System/time', "<Time><timeMode>NTP</timeMode><timeZone>CST-3:00:00</timeZone></Time>", ['Content-Type' => 'application/xml']);
        $this->put('/ISAPI/System/time/ntpServers/1', "<NTPServer><id>1</id><addressingFormatType>ipaddress</addressingFormatType><ipAddress>$server</ipAddress><portNo>$port</portNo><synchronizeInterval>60</synchronizeInterval></NTPServer>", ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setSip(string $login, string $password, string $server, int $port): static
    {
        $this->put('/ISAPI/System/Network/SIP', "<SIPServerList><SIPServer><id>1</id><Standard><enabled>true</enabled><proxy>$server</proxy><proxyPort>$port</proxyPort><displayName>$login</displayName><userName>$login</userName><authID>$login</authID><password>$password</password><expires>30</expires></Standard></SIPServer></SIPServerList>", ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setSyslog(string $server, int $port): static
    {
        $this->put('/ISAPI/Event/notification/httpHosts', "<HttpHostNotificationList><HttpHostNotification><id>1</id><url>/</url><protocolType>HTTP</protocolType><parameterFormatType>XML</parameterFormatType><addressingFormatType>ipaddress</addressingFormatType><ipAddress>$server</ipAddress><portNo>$port</portNo><httpAuthenticationMethod>none</httpAuthenticationMethod></HttpHostNotification></HttpHostNotificationList>", ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setMifare(string $key, int $sector): static
    {
        // TODO: Change the autogenerated stub

        return $this;
    }

    public function setAudioLevels(array $levels): static
    {
        $levels[0] = array_key_exists(0, $levels) ? $levels[0] : 7;
        $levels[1] = array_key_exists(1, $levels) ? $levels[1] : 7;
        $levels[2] = array_key_exists(2, $levels) ? $levels[1] : 7;

        $this->put('/ISAPI/System/Audio/AudioIn/channels/1', "<AudioIn><id>1</id><AudioInVolumelist><AudioInVlome><type>audioInput</type><volume>$levels[0]</volume></AudioInVlome></AudioInVolumelist></AudioIn>", ['Content-Type' => 'application/xml']);
        $this->put('/ISAPI/System/Audio/AudioOut/channels/1', "<AudioOut><id>1</id><AudioOutVolumelist><AudioOutVlome><type>audioOutput</type><volume>$levels[1]</volume><talkVolume>$levels[2]</talkVolume></AudioOutVlome></AudioOutVolumelist></AudioOut>", ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setCallTimeout(int $value): static
    {
        $this->put('/ISAPI/VideoIntercom/operationTime', '<OperationTime><maxRingTime>$timeout</maxRingTime></OperationTime>', ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setTalkTimeout(int $value): static
    {
        $this->put('/ISAPI/VideoIntercom/operationTime', '<OperationTime><talkTime>$timeout</talkTime></OperationTime>', ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setUnlockTime(int $time): static
    {
        $this->put('/ISAPI/AccessControl/Door/param/1', "<DoorParam><doorName>Door1</doorName><openDuration>$time</openDuration></DoorParam>", ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function setVideoOverlay(string $title): static
    {
        $this->put('/ISAPI/System/Video/inputs/channels/1', "<VideoInputChannel><id>1</id><inputPort>1</inputPort><name>$title</name></VideoInputChannel>", ['Content-Type' => 'application/xml']);
        $this->put('/ISAPI/System/Video/inputs/channels/1/overlays', '<VideoOverlay><DateTimeOverlay><enabled>true</enabled><positionY>540</positionY><positionX>0</positionX><dateStyle>MM-DD-YYYY</dateStyle><timeStyle>24hour</timeStyle><displayWeek>true</displayWeek></DateTimeOverlay><channelNameOverlay><enabled>true</enabled><positionY>700</positionY><positionX>0</positionX></channelNameOverlay></VideoOverlay>', ['Content-Type' => 'application/xml']);

        return $this;
    }

    public function unlocked(bool $value): void
    {
        $this->put('/ISAPI/AccessControl/RemoteControl/door/1', $value ? '<cmd>alwaysOpen</cmd>' : '<cmd>resume</cmd>', ['Content-Type' => 'application/xml']);
    }

    public function open(int $value): void
    {
        $this->put('/ISAPI/AccessControl/RemoteControl/door/' . ($value + 1), '<cmd>open</cmd>', ['Content-Type' => 'application/xml']);
    }

    public function clearApartment(): void
    {
        // TODO: Change the autogenerated stub
    }

    public function clearRfid(): void
    {
        // TODO: Change the autogenerated stub
    }
}